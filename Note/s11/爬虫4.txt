
server端
	import re
	import socket
	import select
	import time
	class Snow(object):
		"""
		微型Web框架类
		"""
		def __init__(self, routes):
			self.routes = routes
			self.inputs = set()
			self.request = None
			self.async_request_handler = {}
		def run(self, host='localhost', port=9999):
			"""
			事件循环
			:param host:
			:param port:
			:return:
			"""
			sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
			sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
			sock.bind((host, port,))
			sock.setblocking(False)
			sock.listen(128)
			sock.setblocking(0)
			self.inputs.add(sock)
			self.message = HttpResponse('ok')
			try:
				while True:
					readable_list, writeable_list, error_list = select.select(self.inputs, [], self.inputs,0.005)
					for conn in readable_list:
						# print("sock: %s \nconn:%s"%(sock,conn))
						if sock == conn:    #简单来说就是conn没有这玩意：raddr=('127.0.0.1', 6654)
							print("有新连接来了\n    sock: %s\n    conn:%s"%(sock,conn))
							client, address = conn.accept()
							client.setblocking(False)
							self.inputs.add(client)
						else:
							print("老熟人 处理掉\n    sock: %s\n    conn:%s"%(sock,conn))
							gen = self.process(conn)
							print('    gen：%s\n    gen类型：%s' %(gen,type(gen)))
							if isinstance(gen, HttpResponse):
								print("调用HttpResponse的bitch")
								conn.sendall(gen.response())
								self.inputs.remove(conn)
								conn.close()
							else:
								yielded = next(gen)
								self.async_request_handler[conn] = yielded
								print("非阻塞模式\n  key:%s\n  val:%s"%(conn,yielded))
					self.polling_callback()
			except Exception as e:
				print('抓到一个错误',e)
			finally:
				sock.close()
		def polling_callback(self):
			"""
			遍历触发异步非阻塞的回调函数
			:return:
			"""
			for conn in list(self.async_request_handler.keys()):
				yielded = self.async_request_handler[conn]
				if not yielded.ready:
					continue
				if yielded.callback:
					ret = yielded.callback(self.request, yielded)
					conn.sendall(ret.response())
				self.inputs.remove(conn)
				del self.async_request_handler[conn]
				print("   处理完一个~~")
				conn.close()
		def process(self, conn):
			"""
			处理路由系统以及执行函数
			:param conn:
			:return:
			"""
			self.request = HttpRequest(conn)
			func = None
			for route in self.routes:
				if re.match(route[0], self.request.url):
					func = route[1]
					break
			if not func:
				return HttpNotFound()
			else:
				return func(self.request)
	class Future(object):
		"""
		异步非阻塞模式时封装回调函数以及是否准备就绪
		"""
		def __init__(self, callback):
			self.callback = callback
			self._ready = False
			self.value = None
	
		def set_result(self, value=None):
			self.value = value
			self._ready = True
	
		@property
		def ready(self):
			return self._ready
	class TimeoutFuture(Future):
		"""
		异步非阻塞超时
		"""
		print("hello timeout")
		def __init__(self, timeout):
			super(TimeoutFuture, self).__init__(callback=None)
			self.timeout = timeout
			self.start_time = time.time()
	
		@property
		def ready(self):
			current_time = time.time()
			if current_time > self.start_time + self.timeout:
				self._ready = True
			return self._ready
	class HttpRequest(object):
		"""
		用户封装用户请求信息
		"""
		def __init__(self, conn):
			self.conn = conn
	
			self.header_bytes = bytes()
			self.header_dict = {}
			self.body_bytes = bytes()
	
			self.method = ""
			self.url = ""
			self.protocol = ""
	
			self.initialize()
			self.initialize_headers()
	
		def initialize(self):
	
			header_flag = False
			while True:
				try:
					received = self.conn.recv(8096)
				except Exception as e:
					received = None
				if not received:
					break
				if header_flag:
					self.body_bytes += received
					continue
				temp = received.split(b'\r\n\r\n', 1)
				if len(temp) == 1:
					self.header_bytes += temp
				else:
					h, b = temp
					self.header_bytes += h
					self.body_bytes += b
					header_flag = True
	
		@property
		def header_str(self):
			return str(self.header_bytes, encoding='utf-8')
	
		def initialize_headers(self):
			headers = self.header_str.split('\r\n')
			first_line = headers[0].split(' ')
			if len(first_line) == 3:
				self.method, self.url, self.protocol = headers[0].split(' ')
				for line in headers:
					kv = line.split(':')
					if len(kv) == 2:
						k, v = kv
						self.header_dict[k] = v
	class HttpResponse(object):
		"""
		封装响应信息
		"""
		def __init__(self, content=''):
			self.content = content
	
			self.headers = {}
			self.cookies = {}
	
		def response(self):
			return bytes(self.content, encoding='utf-8')
	class HttpNotFound(HttpResponse):
		"""
		404时的错误提示
		"""
		def __init__(self):
			super(HttpNotFound, self).__init__('404')
client端
	#_*_coding:utf-8_*_
	# Author:Topaz
	from snow1 import TimeoutFuture
	from snow1 import Snow
	from snow1 import HttpResponse
	# from django.http import HttpResponse
	from snow1 import Future
	request_list = []
	def index(request):
		print("what ???")
		return HttpResponse("ok")
	def async(request):     #异步非阻塞，超时
		obj = TimeoutFuture(5)
		print("here is async")
		yield obj
	def callback(request, future):
		return HttpResponse(future.value)
	def req(request):
		obj = Future(callback=callback)
		request_list.append(obj)
		yield obj
	def stop(request):
		obj = request_list[0]
		del request_list[0]
		print('lookhere ',obj)
		obj.set_result('done')
		return HttpResponse('stop')
	
	routes = [
		(r'/index/', index),
		(r'/async/', async ),
		(r'/req/', req),
		(r'/stop/', stop),
	]
	app = Snow(routes)
	app.run(port=8001)

test
server端
	#_*_coding:utf-8_*_
	# Author:Topaz
	import re
	import socket
	import select
	import time
	
	class Snow(object):
		def __init__(self, routes):
			self.routes = routes        #路由系统
			self.inputs = set()         #集合 why
			self.request = None         # 自定义的是none
			self.async_request_handler = {}     #定义个字典
		def run(self, host='localhost', port=9999):
			print("socket 而已")
			sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
			sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
			sock.bind((host, port,))
			# sock.setblocking(False)
			sock.listen(128)
			sock.setblocking(0)
			self.inputs.add(sock)   #添加socks到 self.inputs 里
			print("开始干活噜~~~")
			try:
				while True:
					readable_list, writeable_list, error_list = select.select(self.inputs, [], self.inputs,0.005)   #0.05指定超时时间
					for conn in readable_list:      #每个conn就是一个socket连接
						if sock == conn:
							client, address = conn.accept()
							client.setblocking(False)
							self.inputs.add(client)
						else:
							gen = self.process(conn)
							print("urls 没有调用HttpResponse",type(gen),gen)
							conn.sendall(gen)
							self.inputs.remove(conn)            #把链接移除
							conn.close()						#把这个注掉，连接就不会关闭，web端能清楚看到夯住，新的连接(页面请求)也不处理,阻塞就是这样了
			except Exception as e:
				pass
			finally:
				# conn.close()  # 并且关闭
				sock.close()
		def process(self, conn):
			self.request = HttpRequest(conn)        #前面的定义 self.request =None  这里去找HttpRequest(conn)
			for route in self.routes:
				print(self.request.url)
				if re.match(route[0], self.request.url):
					func = route[1]
					break
			if not func:
				return ("404")   #没有函数就调用HttpNotFound
			else:
				return func(self.request)
	
	class HttpRequest(object):
		def __init__(self, conn):
			self.conn = conn        #就是连接传来了
			self.header_bytes = bytes()     #字节元组
			self.header_dict = {}           #字典
			self.body_bytes = bytes()       #字节原则
			self.method = ""
			self.url = ""
			self.protocol = ""
			self.initialize()
			self.initialize_headers()
		def initialize(self):
			header_flag = False
			while True:
				try:
					received = self.conn.recv(8096)     #接收
				except Exception as e:
					received = None
				if not received:
					# print("没有received",received)
					break
				temp = received.split(b'\r\n\r\n', 1)
				if len(temp) == 1:
					print("temp长度为一时，header_bytes加上temp")
					self.header_bytes += temp
				else:
					h, b = temp
					self.header_bytes += h   #h加到header_bytes里
					self.body_bytes += b     #b加到body_bytes里
					header_flag = True      #header flag设为True
		@property
		def header_str(self):
			return str(self.header_bytes, encoding='utf-8')
		def initialize_headers(self):
			headers = self.header_str.split('\r\n')
			first_line = headers[0].split(' ')      #==>['GET', '/index', 'HTTP/1.1']
			if len(first_line) == 3:
				self.method, self.url, self.protocol = headers[0].split(' ')
				for line in headers:
					kv = line.split(':')        #GET /index HTTP/1.1 ==> ['GET /index HTTP/1.1']
					# print(len(kv),'====',kv)  #取消注释查看 有什么存到字典里了
					if len(kv) == 2:            #kv长度为2的，作为键值对存到字典里
						k, v = kv
						self.header_dict[k] = v

调用：
	#_*_coding:utf-8_*_
	# Author:Topaz
	from snow import Snow
	def index(request):
		print("look here",request.url)
		return bytes("wtf", encoding='utf-8')
	routes = [
		(r'/index/',index),
	]
	app = Snow(routes)
	app.run(port=8080)

test.py		
	'''这个例子可以看到异步非阻塞超时是怎么回事
		1.async函数实例化TimeoutFuture类
		2.TimeoutFuture类封装了起始时间和ready函数
		3.async函数yield TimeoutFuture实例
		4.next获取生成器中元素,得到设置好的起始时间和ready函数
		5.调用ready函数
			web框架：ready函数做了是否超时的计算和判断，超时self._ready就是True
			我：time.sleep()
		6.web框架接下来判断self._ready的值，True就断开
		#昨天看web框架这还萌逼，今天已经畅通了，so easy，昨天出门儿是没带奶子吧
	'''
	#!/usr/bin/env python
	# coding:utf-8
	import time
	class Future():
		def __init__(self):
			self._ready = False
		def set_result(self):
			self._ready = True
		@property
		def ready(self):
			return self._ready
			print("走到ready了，捂污吴开心开心开心")
	
	class TimeoutFuture(Future):
		print("Timeout")
		def __init__(self,timeout):
			super(TimeoutFuture,self).__init__()
			self.timeout = timeout
			self.start_time = time.time()
	
		def ready(self):
			print("ready")
			current_time = time.time()
			if current_time - self.start_time > self.timeout:
				print("超时断开")
				self._ready = True
			else:
				print("时间没到")
			return self._ready
			
	# a = TimeoutFuture(5)
	# time.sleep(6)
	# aa = a.ready()
	# print(aa)
			
	def async(num):
		obj = TimeoutFuture(num)
		print("拿到了",obj)
		yield obj
		print("成了")
	
	a  = async(1)
	b = next(a)
	time.sleep(2)
	c = b.ready()
	print('c是啥',c)
	













































