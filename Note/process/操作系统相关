进程是什么？
	运行中的程序叫做进程，是系统进行资源分配和调度的基本单位
	由内核进行调度，进程运行占用一定的cpu/存储空间/io设备
	优点：利于资源的管理和保护
	缺点：进程执行开销大
	
进程组成
	进程栈：进程的栈大小是随机确定的至少比线程栈要大，但是不到线程栈大小的2倍
	程序：描述进程要完成的功能
	数据：程序在执行时所需要的数据和工作区
	进程控制块PCB：转到PCB那里

PCB 进程控制块：操作系统中为进程定义一个专门的数据结构
	调度信息：供进程调度时使用的，描述了进程当前所处的状况，包括进程名，进程号，存储信息，优先级，当前状态，消息队列指针，资源清单，家族关系，进程队列指针和当前打开文件（调度信息表）
	现场信息：刻画了进程的运行情况，只记录那些可能会被其他进程改变的寄存器，如程序状态字，时钟

进程创建过程
	1.为新进程分配一个进程标示号，并申请一个空白的PCB	
	2.为进程分配资源，为新进程的程序和数据分配必要的空间
	3.初始化PCB，主要包括初始化标识信息、初始化处理器状态信息和初始化处理器控制信息，以及设置进程的空闲
	4.如果进程就绪队列能够接纳新进程，就将新进程插入到就绪队列，等待被调度运行	
	引起进程终止的时间主要有：正常结束、表示进程的任务已经完成和准备退出运行。异常结束是指进程在运行时，发生了某种异常事件，是程序无法继续运行，如：存储区越界、保护措、非法指令、特权指令错、IO故障等。外界干预是指进程外界的请求而终止，如操作员或操作系统干预、父进程请求和父进程终止

操作系统终止进程的过程
	1.根据被终止进程的标示符，检索PCB，从中读出该进程的状态。
	2.如果被终止进程处于执行状态，立即终止该进程的执行，将处理器资源分配给其他进程
	3.如果这个进程还有子进程，就把他所有子进程终止
	4.将该进程所拥有的资源归还给父进程或归还给操作系统。
	5.将PCB从所在队列（链表）中删除
		
进程切换
	CPU看来所有的任务都是一个一个的轮流执行的，具体的轮流方法就是：
	人话：
		正在执行A，需要切换，保存程序A的上下文
		调入下一个要执行的程序B的上下文
		然后开始执行B
		
	1.保存上下文，包括程序计数器和其他寄存器
	2.更新PCB信息
	3.把要被切换掉的进程的PCB移入相应的队列，如就绪、在某事件阻塞等队列
	4.选择另一个进程执行，并更新PCB
	5.恢复上下文
	6.执行
					
进程的状态：
	通常进程有以下五种状态。前三种是进程的基本状态
	1） 运行状态：进程正在处理器上运行。在单核CPU环境下，当前只能有一个进程处于运行状态。
	2） 就绪状态：进程处于准备运行的状态，已获得除CPU之外的一切所需资源，得到CPU就可以运行。
	3） 阻塞状态：进程在因为等待某一事件而暂停运行，如等待CPU之外某资源为可用，或等待输入输出的完成，这种情况下CPU空闲，该进程也不能运行。
	4） 创建状态：进程正在被创建，尚未转到就绪状态。创建进程通常需要多个步骤：首先申请一个空白的PCB，并向PCB中填写一些控制和管理进程的信息；然后由系统为该进程分配运行时所必须的资源；最后把该进程转入到就绪状态
	5） 结束状态：进程正在从系统中消失，可能是进程正常结束或其他原因中断退出运行。当进程需要结束运行时，系统首先必须置该进程为结束状态，然后再进一步处理资源释放和回收工作
	
线程是什么？
	线程是进程中的一个实体，是CPU调度和分派的基本单位
	属性：
		- 一个线程可以创建和撤销另一个线程，同一个线程中的多个线程间可以并发执行，线程拥有就绪，等待，运行三种基本状态
		- 不同的线程可以执行相同的程序，同一个程序被不同用户调用时，操作系统可以为它们创建不同的线程
		- 同一个进程中的线程共享该进程的内存地址
		- 线程是处理器的独立调度单位，多个线程可以并发执行的，在单CPU计算机系统中，各线程可交替地占用CPU，在多CPU计算机系统中，各线程可同时占用不同的CPU，若各个CPU同时为一个进程内的个线程服务则可缩短进程的处理时间
		- 一个线程被创建后便开始它的生命周期，直到终止，线程在生命周期内会经历等待，就绪和运行等各种状态变化
	优点：
		- 创建一个新线程花费时间少，因不需另行分配资源，因此创建线程比创建进程要快，且系统开销也小
		- 两个线程的切换花费时间少
		- 由于同一进程内的线程共享内存和文件，线程间相互通信无需调用内核，故不需要额外的通信机制，通信更简便，信息传递时间更快
	缺点：不利于资源的管理和保护

线程组成
	共享资源：
		地址空间
		全局变量
		打开的文件
		子进程
	独享资源：
		线程ID
		当前指令指针(PC)
		寄存器
		栈：大小固定，默认8MB
			
线程分类：
	内核态线程：由操作系统本身管理
		优点：如果进程中的一个线程被阻塞，内核可以调度同一个进程中的另一个线程
		缺点：内核调度的，慢
	用户态线程：进程直接管理线程
		优点：线程的切换无需陷入内核，故切换开销小，速度非常快
		缺点：用户线程不具备自身上下文，任意给定时刻每个进程只能够有一个线程在运行，一个线程受阻造成整个进程受阻
	现在操作系统的线程实现模型：
		用户态的负责进程内部线程在非阻塞时的切换
		内核态的操作系统负责阻塞线程的切换
		
TCB 线程控制块：内核线程才有的
	内核根据该控制块，感知线程的存在，并进行控制。在一定程度上类似于进程，只是创建、调度的开销要比进程小。有的统计是1：10
		- 线程状态
		- 当线程不运行时，被保存的线程资源
		- 一组执行堆栈
		- 存放每个线程的局部变量主存区
		- 访问每个线程的局部变量主存区
		- 访问同一个进程中的主存和其它资源
	
线程创建过程
	调用函数创建线程时，拥有共享的运行环境，只有栈是独立的，共享的运行环境就是所属进程有的共享内存空间，共享文件系统信息，共享进程ID，共享文件句柄
	在Linux下，创建进程是在核外进行的，内核提供两个系统调用_clone()和fork()，核内提供创建进程的接口do_fork(),使用系统调用_clone()或fork()，
	最终都调用核内API do_dork(),do_fork（）参数包含了共享内存空间，共享信号句柄，共享进程ID等，使用fork系统调用创建进程时，do_fork()不使用任何共享属性，
	进程拥有独立的运行环境，而使用pthread_create()创建线程时，共享参数全部传给核内的do_fork(),拥有共享的运行环境，只有栈是独立的，由_clone()传入
		
	通过指针指明主程序和堆栈大小，包括调度优先级等参数
	
线程终止过程
	完成任务自行终止或被外界强行终止		

线程切换
	线程和进程的最大区别就在于地址空间不用切换
	切换栈和上下文

协程是什么？
	用户模式下的轻量级线程，操作系统内核不知道协程的存在，协程的调度完全由用户控制
	优点：
		无需线程上下文切换的开销
		随时中断随时恢复
	缺点：
		无法利用多核资源
		进行阻塞（Blocking）操作（如IO时）会阻塞掉整个程序：这一点和事件驱动一样，可以使用异步IO操作来解决
	
进程和线程之间的区别
	1.同一进程内的线程共享进程资源，而进程间互相独立
	2.	
		进程有自己的独立地址空间，每启动一个进程，系统就会为它分配地址空间，建立数据表来维护代码段、堆栈段和数据段（延伸进程切换）
		线程共享进程中的地址空间，因此CPU切换一个线程的花费远比进程要小很多（延伸线程切换）
	3.
		线程之间的通信更方便，同一进程下的线程共享变量等数据
		而进程之间的通信需要以通信的方式IPC进行，主要的IPC有：消息队列，管道，信号量	
	4.进程是资源分配的最小单位，线程是程序执行的最小单位
	5.
		多进程程序更健壮，而一个进程死掉并不会对另外一个进程造成影响，因为进程有自己独立的地址空间
		多线程程序更脆，只要有一个线程死掉，整个进程也死掉了，线程没有自己独立的地址空间
	
	6.调度：线程作为调度和分派的基本单位，进程作为基本单位
		同一进程中的线程的切换不会引起进程切换
		非同一进程中的线程切换将会引起进程切换
	7.线程创建，内核不需要复制进程的内存空间或文件描述符，节省了大量的CPU时间，使得线程创建比进程快上十上百倍

协程和进程线程之间的区别
	1.调度完全由用户控制
	2.一个线程可以多个协程，一个进程也可以单独拥有多个协程
	3.协程能保留上一次调用时的状态，每次过程重入时，就相当于进入上一次调用的状态

非阻塞socket+IO复用
	
socket
	介绍
		socket(套接字),用于描述IP地址和端口，是一个通信链的句柄,应用程序通常通过"套接字"向网络发出请求或者应答网络请求
		socket起源于Unix，而Unix/Linux基本哲学之一就是“一切皆文件”，对于文件用【打开】【读写】【关闭】模式来操作。socket就是该模式的一个实现，socket即是一种特殊的文件，一些socket函数就是对其进行的操作（读/写IO、打开、关闭）
		socket本质是编程接口(API)，对TCP/IP的封装
		socket和file的区别：	
			file模块是针对某个指定文件进行【打开】【读写】【关闭】
			socket模块是针对 服务器端 和 客户端Socket 进行【打开】【读写】【关闭】
	socket的TCP三次握手：connect 激发 TCP的三次握手过程
		1.服务器必须准备好接受外来的连接，通过调用socket,bind和1isten函数来完成，称为被动打开(Passive open)  
		2.客户通过调用connect进行主动打开(active opn)，引起客户TCP发送一个SYN分节(表示同步)，它告诉服务器客户将在(待建立的)连接中发送的数据的初始序列号  
		3.服务器必须确认客户的SYN，同时自己也得发送一个SYN分节，它含有服务器将在同一连接中发送的数据的韧始序列号
		4.服务器以单个分节向客户发送SYN和对客户  SYN的ACK。客户必须确认服务器的SYN 
		connect 报错：
			未收到SYN的响应(服务器超时,75s)  ==> 用户端输出:Connection time out.  
	socket服务端
		1.打开一通信通道并告知本地主机，它愿意在某一公认地址上的某端口（如FTP的端口可能为21）接收客户请求
		2.等待客户请求到达该端口
		3.接收到客户端的服务请求时，处理该请求并发送应答信号。接收到并发服务请求，要激活一新进程来处理这个客户请求（如UNIX系统中用fork、exec）。新进程处理此客户请求，并不需要对其它请求作出应答。服务完成后，关闭此新进程与客户的通信链路，并终止
		4.返回第（2）步，等待另一客户请求
		5.关闭服务器
	
	socket客户端		
		1.打开一通信通道，并连接到服务器所在主机的特定端口
		2.向服务器发服务请求报文，等待并接收应答；继续提出请求......
		3.请求结束后关闭通信通道并终止。
	
Windows下select模型
	通过select能够实现I/O多路复用，监视并等待多个文件描述符的属性变化（可读、可写或错误异常）
	参数
		nfds：第一个参数，被忽略
		readfds：第二个参数，可读性套接字集合指针
		writefds：第三个参数，可写性套接字集合指针
		exceptfds：第四个参数，检查错误套接字集合指针
		timeout：第五个参数，等待时间
	fd_set数据结构
		在select函数返回时，会在fd_set中，填入相应的套接字
		fd_cout：该集合套接字数量，最大为64.
		fd_array：套接字数组
	readfds数组将包括满足以下条件的套接字：
		有数据可读，此时在此套接字上调用recv，立即收到对方的数据
		连接已经关闭，重设或终止
		正在请求建立连接的套接字，此时调用accept函数会成功
	writefds数组包含满足下列条件的套接字
		1.有数据可以发出，此时在此套接字上调用send,可以向对方发送数据
		2.调用connect函数，并连接成功的套接字
	exceptfds数组将包括满足下列条件的套接字
		1.调用connection函数，但连接失败的套接字
		2.有带外（out of band）数据可读
	select函数的使用:
		1.调用select函数对套接字进行监视之前，必须将要监视的套接字分配给上述三个数组中的一个
		2.然后调用select函数，再次判断需要监视的套接字是否还在原来的集合中
		3.就可以知道该集合是否正在发生IO操作
	判断某个套接字是否存在可读的数据：
		1.将该套接字加入到readfds集合
		2.以readfds作为第二个参数调用select函数
		3.当select函数返回时，应用程序判断该套接字是否仍然存在于readfds集合
		4.如果该套接字存在与readfds集合，则表明该套接字可读
		5.此时就可以调用recv函数接收数据。否则，该套接字不可读
	
	
延伸
	处理机:
		处理机是处理计算机系统中存储程序和数据，并按照程序规定的步骤执行指令的部件
		包括：中央处理器，主存储器，输入-输出接口，加接外围设备就构成完整的计算机系统
	调度:
		调度是对CPU进行分配，就是从就绪队列中，按照一定的算法，选择一个进程并将CPU分配给他运行，以实现进程的并发执行
	寄存器：
		用来暂存指令、数据和地址
	堆栈帧
		堆 (heap 软件底层原理，而非数据结构)
			堆位于RAM中，是一个通用的内存池，它一般由程序员分配释放，若程序员不释放，程序结束时可能由OS回收。所有的对象都存储在堆中。堆是动态分配内存的，并且你可以分配使用很大的内存。但是用不好会产生内存泄漏。
			是大家共有的空间，分全局堆和局部堆。全局堆就是所有没有分配的空间，局部堆就是用户分配的空间。堆在操作系统对进程初始化的时候分配，运行过程中也可以向系统要额外的堆，但是记得用完了要还给操作系统，要不然就是内存泄漏
		栈：(hardware stack。软件底层原理，而非数据结构)
			是个线程独有的，保存其运行状态和局部自动变量的。栈在线程开始的时候初始化，每个线程的栈互相独立，因此，栈是　thread safe的。操作系统在切换线程的时候会自动的切换栈，就是切换寄存器。栈空间不需要在高级语言里面显式的分配和释放
			栈存在于RAM中，它由编译器自动分配、释放。栈是动态的，它的存储速度是第二快的。在栈上存取数据比通过指针在堆上存取数据快些。不过它易遭受缓冲区溢出攻击的困扰。
		帧栈、帧指针、栈指针
			帧栈（stack frame）：在内存的程序栈中，为单个过程分配的那部分栈称为帧栈。如下图所示。栈用来传递过程参数、存储返回信息、保存寄存器以供以后恢复之用，以及用于本地存储。栈底位于内存高地址，栈顶位于内存高地址。加入有2个过程P和Q，前者是调用者，后者是被调用者。Q的参数（实参）放在P的帧栈中。另外，当P调用Q时，P中的返回地址被压入栈中，形成P的帧栈的末尾，返回地址（return address）就是当程序从Q返回时应该继续执行的地方。Q的帧栈从保存的栈指针的值（例如，%ebp）开始，后面是保存的其他寄存器的值。
			帧指针（frame pointer）&栈指针（stack pointer）：帧栈的最顶端是以两个指针定界的，寄存器%ebp作为帧指针，而寄存器%esp作为栈指。当程序执行时，栈指针是可以移动的，因此大多数信息的访问都是相对于帧指针的。	
	虚拟内存:
		虚拟内存是计算机系统内存管理的一种技术
		它使得应用程序认为它拥有连续可用的内存（一个连续完整的地址空间），而实际上，它通常是被分隔成多个物理内存碎片，还有部分暂时存储在外部磁盘存储器上，在需要时进行数据交换。与没有使用虚拟内存技术的系统相比，使用这种技术的系统使得大型程序的编写变得更容易，对真正的物理内存（例如RAM）的使用也更有效率
	内核概念
		内核是硬件与软件之间的一个中间层，其作用是将应用程序的请求传递给硬件，并充当底层驱动程序，对系统中的各种设备和组件进行寻址
	套接字：
		用于描述IP地址和端口，是一个通信链的句柄
	RAM：
		主存，与CPU直接交换数据的内部存储器，可以随时读写
	OSI七层模型：
		物理层
		数据链路层
		网络层
		传输层
		会话层
		表示层
		应用层
	TCP三次握手
		三次握手(Three-way Handshake)，是指建立一个 TCP 连接时，客户端和服务器总共发送3个包
		1.客户端SYN 
		2.服务器发回确认包(SYN+ACK)应答
		3.客户端再次发送确认包(ACK)
	TCP四次断开
		客户端发送一个 FIN
		服务端回个ACK
		服务端发FIN
		客户端发ACK		
	
	多任务
		抢占式多任务：简单地说，就是操作系统会把控制权从一个任务那里抢过来，分配给另外一个任务。这时一种基于时间片的复用，到时间了就停止，CPU分配给另外一个任务
		协作式多任务（非抢占式）：任务在合适的时候把控制权交出来，交给另外一个任务
	上下文是什么？？
		除了CPU以外所有的就构成的程序的执行环境
		执行一段程序代码，实现一个功能，当得到CPU的时候，相关的资源必须也已经就位，就是显卡啊，GPS啊什么的必须就位，这些相关资源构成了执行环境
		当这个程序执行完了，或者分配给他的CPU执行时间用完了，就要被切换出去，等待下一次CPU的临幸，在被切换出去的最后一步工作就是保存程序上下文，因为这个是下次他被CPU临幸的运行环境，必须保存		
	线程上下文切换原因：
		时间片用完，CPU正常调度下一个任务
		碰到IO阻塞，调度器将此任务挂起，继续下一任务
		多个任务抢占锁资源，当前任务没有抢到锁资源，被调度器挂起，继续下一任务
		避免上下文切换：协程，在单线程里实现多任务的调度，并在单线程里维持多个任务间的切换
	进程上下文切换原因
		中断处理：接收到中断请求时	中断原因：软件中断CPU指令，硬件中断
		多任务处理
		用户态切换
	
	
	
	
	
	
	
	
	
	
	
	
	
	
